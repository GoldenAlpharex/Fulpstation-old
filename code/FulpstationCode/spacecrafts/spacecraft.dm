// Oh boy, what am I jumping into?
// For anything on the mechanic job, please refer to the mechanic.dm file.

#define SPACECRAFT_LAYER 4.3
#define SPACECRAFT_ARMS_LAYER 4.4
#define SPACECRAFT_THRUSTERS_LAYER 4.5

/obj/vehicle/sealed/spacecraft
    name = "Generic Spacecraft!"
    icon = 'icons/Fulpicons/goldens_treasures/spacecraft.dmi' //We gotta have a placeholder for testing purposes, heh?
    icon_state = "pod_body"
    layer = SPACECRAFT_LAYER
    move_resist = MOVE_FORCE_STRONG
    resistance_flags = FIRE_PROOF | ACID_PROOF
    default_driver_move = FALSE
    force = 5
    var/enclosed = TRUE //Just in case there's ever an open-concept spacecraft.
    armor = list("melee" = 20, "bullet" = 10, "laser" = 0, "energy" = 0, "bomb" = 0, "bio" = 0, "rad" = 0, "fire" = 100, "acid" = 100)
    var/use_internal_tank = TRUE
    var/internal_tank_valve = ONE_ATMOSPHERE
    var/obj/machinery/portable_atmospherics/canister/internal_tank
    var/datum/gas_mixture/cabin_air
    var/obj/machinery/atmospherics/components/unary/portables_connector/connected_port = null
    var/overlays_file = 'icons/Fulpicons/goldens_treasures/spacecraft_overlays.dmi'

    var/static/list/spacecraft_overlays = list()
    var/obj/item/stock_parts/cell/cell //To keep track of the cell in the spacecraft.
    var/obj/item/stock_parts/scanning_module/scanmod //To keep track of the scanning module in the spacecraft.
    var/obj/item/stock_parts/capacitor/capacitor //To keep track of the capacitor in the spacecraft.
    var/obj/item/stock_parts/thrusters/thrusters //To keep track of the thrusters in the spacecraft.
    var/obj/item/spacecraft/arms/arms //To keep track of the arms of the spacecraft.

    var/haslights = TRUE //So we could potentially tamper with the lights later on.
    var/lights = FALSE //Only turn them on if you actually need them, will probably reduce the amount of lag generated by this.
    var/lights_power = 6
    var/lights_energy_drain = 5 //Basic lights energy drain when they're turned on.
    var/obj/item/radio/mech/radio

    // Action Datums for spacecraft buttons //
    var/datum/action/innate/vehicle/sealed/spacecraft/spacecraft_toggle_lights/lights_action = new

/obj/vehicle/sealed/spacecraft/Initialize()
    . = ..()
    add_cabin()
    add_radio()
    if(enclosed)
        add_airtank()
    add_cell()
    add_scanmod()
    add_capacitor()
    add_thrusters()
    add_arms()
    var/datum/component/riding/D = LoadComponent(/datum/component/riding)
    D.override_allow_spacemove = TRUE
    D.vehicle_move_delay = 50 //Default move delay, if needed at some point. It gets changed a lot, so this might get changed eventually.
    set_spacecraft_overlay()
    START_PROCESSING(SSobj, src)

/obj/vehicle/sealed/spacecraft/Destroy()
    if(internal_tank)
        qdel(internal_tank)
    internal_tank = null
    if(cell)
        qdel(cell)
    cell = null
    if(scanmod)
        qdel(scanmod)
    scanmod = null
    if(capacitor)
        qdel(capacitor)
    capacitor = null
    if(thrusters)
        qdel(thrusters)
    thrusters = null
    if(arms)
        qdel(arms)
    arms = null
    if(loc)
        loc.assume_air(cabin_air)
        air_update_turf()
    else
        qdel(cabin_air)
    cabin_air = null

/obj/vehicle/sealed/spacecraft/CheckParts(list/parts_list)
    . = ..()
    cell = locate(/obj/item/stock_parts/cell) in contents
    scanmod = locate(/obj/item/stock_parts/scanning_module) in contents
    capacitor = locate(/obj/item/stock_parts/capacitor) in contents
    thrusters = locate(/obj/item/stock_parts/thrusters) in contents
    arms = locate(/obj/item/spacecraft/arms) in contents
    update_part_values()

/obj/vehicle/sealed/spacecraft/proc/update_part_values()
    if(scanmod)
        lights_energy_drain = 6 - scanmod.rating

/obj/vehicle/sealed/spacecraft/proc/add_airtank()
    internal_tank = new /obj/machinery/portable_atmospherics/canister/air(src)
    return internal_tank

/obj/vehicle/sealed/spacecraft/proc/add_cabin()
    cabin_air = new
    cabin_air.temperature = T20C
    cabin_air.volume = 200
    cabin_air.add_gases(/datum/gas/oxygen, /datum/gas/nitrogen)
    cabin_air.gases[/datum/gas/oxygen][MOLES] = O2STANDARD*cabin_air.volume/(R_IDEAL_GAS_EQUATION*cabin_air.temperature)
    cabin_air.gases[/datum/gas/nitrogen][MOLES] = N2STANDARD*cabin_air.volume/(R_IDEAL_GAS_EQUATION*cabin_air.temperature)
    return cabin_air

/obj/vehicle/sealed/spacecraft/proc/add_radio()
    radio = new(src)
    radio.name = "[src] radio"
    radio.icon = icon
    radio.icon_state = icon_state
    radio.subspace_transmission = TRUE


//This will make sure that there's a cell when it's spawned in if it's a map spawn or admin-spawned.
/obj/vehicle/sealed/spacecraft/proc/add_cell(var/obj/item/stock_parts/cell/C=null)
    QDEL_NULL(cell)
    if(C)
        C.forceMove(src)
        cell = C
    else
        cell = new /obj/item/stock_parts/cell/high/plus(src)

//This will make sure that there's a scanning module when it's spawned in if it's a map spawn or admin-spawned.
/obj/vehicle/sealed/spacecraft/proc/add_scanmod(obj/item/stock_parts/scanning_module/sm=null)
    QDEL_NULL(scanmod)
    if(sm)
        sm.forceMove(src)
        scanmod = sm
    else
        scanmod = new /obj/item/stock_parts/scanning_module(src)

//This will make sure that there's a capacitor when it's spawned in if it's a map spawn or admin-spawned.
/obj/vehicle/sealed/spacecraft/proc/add_capacitor(obj/item/stock_parts/capacitor/cap=null)
    QDEL_NULL(capacitor)
    if(cap)
        cap.forceMove(src)
        capacitor = cap
    else
        capacitor = new /obj/item/stock_parts/capacitor(src)

//This will make sure that there's thrusters when it's spawned in if it's a map spawn or admin-spawned.
/obj/vehicle/sealed/spacecraft/proc/add_thrusters(var/obj/item/stock_parts/thrusters/thruster=null)
    QDEL_NULL(thrusters)
    if(thruster)
        thruster.forceMove(src)
        thrusters = thruster
    else
        thrusters = new /obj/item/stock_parts/thrusters(src)

//This will make sure that there's basic arms when it's spawned in if it's a map spawn or admin-spawned.
/obj/vehicle/sealed/spacecraft/proc/add_arms(var/obj/item/spacecraft/arms/A=null)
    QDEL_NULL(arms)
    if(A)
        A.forceMove(src)
        arms = A
    else
        arms = new /obj/item/spacecraft/arms(src)

/obj/vehicle/sealed/spacecraft/process()
    var/internal_temp_regulation = 1

    if(internal_temp_regulation)
        if(cabin_air && cabin_air.return_volume() > 0)
            var/delta = cabin_air.temperature - T20C
            cabin_air.temperature -= max(-10, min(10, round(delta/4,0.1)))
    
    if(internal_tank)
        var/datum/gas_mixture/tank_air = internal_tank.return_air()

        var/release_pressure = internal_tank_valve
        var/cabin_pressure = cabin_air.return_pressure()
        var/pressure_delta = min(release_pressure - cabin_pressure, (tank_air.return_pressure() - cabin_pressure)/2)
        var/transfer_moles = 0
        if(pressure_delta > 0) //cabin pressure lower than release pressure
            if(tank_air.return_temperature() > 0)
                transfer_moles = pressure_delta*cabin_air.return_volume()/(cabin_air.return_temperature() * R_IDEAL_GAS_EQUATION)
                var/datum/gas_mixture/removed = tank_air.remove(transfer_moles)
                cabin_air.merge(removed)
        else if(pressure_delta < 0) //cabin pressure higher than release pressure
            var/datum/gas_mixture/t_air = return_air()
            pressure_delta = cabin_pressure - release_pressure
            if(t_air)
                pressure_delta = min(cabin_pressure - t_air.return_pressure(), pressure_delta)
            if(pressure_delta > 0) //if location pressure is lower than cabin pressure
                transfer_moles = pressure_delta*cabin_air.return_volume()/(cabin_air.return_temperature() * R_IDEAL_GAS_EQUATION)
                var/datum/gas_mixture/removed = cabin_air.remove(transfer_moles)
                if(t_air)
                    t_air.merge(removed)
                else //just delete the cabin gas, we're in space or some shit
                    qdel(removed)
    /*if(occupants)
        if(cell)
            var/cellcharge = cell.charge/cell.maxcharge
            switch(cellcharge)
                if(0.75 to INFINITY)
                    occupants.clear_alert("charge")
                if(0.5 to 0.75)
                    occupants.throw_alert("charge", /obj/screen/alert/lowcell, 1)
                if(0.25 to 0.5)
                    occupants.throw_alert("charge", /obj/screen/alert/lowcell, 2)
                if(0.01 to 0.25)
                    occupants.throw_alert("charge", /obj/screen/alert/lowcell, 3)
                else
                    occupants.throw_alert("charge", /obj/screen/alert/emptycell)*/
    if(lights)
        if(!scanmod)
            lights = FALSE
            return
        use_power(lights_energy_drain)

/obj/vehicle/sealed/spacecraft/spacepod
    name = "space pod"
    desc = "It's a pod. In space. Doing what pods do."
    icon = 'icons/Fulpicons/goldens_treasures/spacecraft.dmi'
    icon_state = "pod_body"

/obj/vehicle/sealed/spacecraft/driver_move(mob/user, direction)
    var/turf/T = get_turf(src)
    var/datum/gas_mixture/env = T.return_air()
    var/pressure = env.return_pressure()
    var/datum/component/riding/R = GetComponent(/datum/component/riding)
    if(pressure >= 30) //Pressure too high? Tough luck, can't move.
        R.vehicle_move_delay = 500
        canmove = FALSE
        return ..()
    if(pressure <= 30 && pressure > 0.1) //Still some pressure? Tough luck, slow as fuck.
        R.vehicle_move_delay = 50
    if(pressure <= 0.1) //Finally in space like intended? Godspeed brother.
        R.vehicle_move_delay = 0.1
    R.handle_ride(user, direction)
    return TRUE

// Atmospherics stuff //

/obj/vehicle/sealed/spacecraft/remove_air(amount)
    if(use_internal_tank)
        return cabin_air.remove(amount)
    return ..()

/obj/vehicle/sealed/spacecraft/return_air()
    if(use_internal_tank)
        return cabin_air
    return ..()

/obj/vehicle/sealed/spacecraft/return_analyzable_air()
    return cabin_air

/obj/vehicle/sealed/spacecraft/proc/return_pressure()
    var/datum/gas_mixture/t_air = return_air()
    if(t_air)
        . = t_air.return_pressure()

/obj/vehicle/sealed/spacecraft/return_temperature()
    var/datum/gas_mixture/t_air = return_air()
    if(t_air)
        . = t_air.return_temperature()

// Power stuff //

/obj/vehicle/sealed/spacecraft/proc/get_charge()
    if(cell)
        return max(0, cell.charge)

/obj/vehicle/sealed/spacecraft/proc/has_charge(amount)
    return (get_charge()>=amount)

/obj/vehicle/sealed/spacecraft/proc/use_power(amount)
    if(get_charge() && cell.use(amount))
        return 1
    return 0

/obj/vehicle/sealed/spacecraft/proc/give_power(amount)
    if(!isnull(get_charge()))
        cell.give(amount)
        return 1
    return 0

// Actions //

/obj/vehicle/sealed/spacecraft/proc/GrantActions(mob/living/user)
    if(is_driver(user))
        if(haslights)
            lights_action.Grant(user, src)

/obj/vehicle/sealed/spacecraft/proc/RemoveActions(mob/living/user)
    if(is_driver(user))
        if(haslights)
            lights_action.Remove(user, src)

/datum/action/innate/vehicle/sealed/spacecraft
    check_flags = AB_CHECK_RESTRAINED | AB_CHECK_STUN | AB_CHECK_CONSCIOUS
    icon_icon = 'icons/mob/actions/actions_mecha.dmi'
    var/obj/vehicle/sealed/spacecraft/chassis

/datum/action/innate/vehicle/sealed/spacecraft/Grant(mob/living/L, obj/vehicle/sealed/spacecraft/M)
    if(M)
        chassis = M
    ..()

/datum/action/innate/vehicle/sealed/spacecraft/Destroy()
    chassis = null
    return ..()

/datum/action/innate/vehicle/sealed/spacecraft/spacecraft_toggle_lights
    name = "Toggle Lights"
    button_icon_state = "mech_lights_off"

/datum/action/innate/vehicle/sealed/spacecraft/spacecraft_toggle_lights/Activate(mob/user)
    if(!owner || !chassis) //Figure a way to add a check to make sure it's the driver. Or not. Who cares in the long run, if spacecrafts aren't going to be meant to have more than one mob inside of it at a time?
        return
    chassis.lights = !chassis.lights
    if(chassis.lights)
        chassis.set_light(chassis.lights_power)
        button_icon_state = "mech_lights_on"
    else
        chassis.set_light(-chassis.lights_power)
        button_icon_state = "mech_lights_off"
    to_chat(user, "<span class='notice'>Toggled lights [chassis.lights?"on":"off"].</span>")
    UpdateButtonIcon()

// Overlay stuff //

/obj/vehicle/sealed/spacecraft/setDir(newdir)
    . = ..()
    set_spacecraft_overlay()

/obj/vehicle/sealed/spacecraft/proc/set_spacecraft_overlay()
    var/mutable_appearance/arms_overlay
    var/mutable_appearance/thruster_overlay

    if(arms)
        arms_overlay = get_spacecraft_overlay("pod_arms", overlays_file, SPACECRAFT_ARMS_LAYER)
        arms_overlay.pixel_y = -23
        if(dir == EAST)
            arms_overlay.pixel_x = 12
        if(dir == WEST)
            arms_overlay.pixel_x = -12
        if(dir == NORTH || dir == SOUTH)
            arms_overlay.pixel_x = 0
    if(thrusters)
        thruster_overlay = get_spacecraft_overlay("thrusters", overlays_file, SPACECRAFT_THRUSTERS_LAYER)
    
    
    cut_overlays()
    add_overlay(arms_overlay)
    add_overlay(thruster_overlay)

/obj/vehicle/sealed/spacecraft/proc/get_spacecraft_overlay(icon_state, icon_file, layer)
	var/obj/vehicle/sealed/spacecraft/A
	pass(A)	//suppress unused warning
	var/list/spacecraft_overlays = A.spacecraft_overlays
	var/iconkey = "[icon_state][icon_file]"
	if((!(. = spacecraft_overlays[iconkey])))
		. = spacecraft_overlays[iconkey] = mutable_appearance(icon_file, icon_state, layer)

// Items //
/obj/item/spacecraft/arms
    name = "spacecraft arms"
    desc = "A generic pair of spacecraft-grade arms."
    icon = 'icons/Fulpicons/goldens_treasures/spacecraft_overlays.dmi'
    icon_state = "pod_arms_item"
    w_class = WEIGHT_CLASS_SMALL